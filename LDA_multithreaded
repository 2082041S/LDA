import numpy as np
import time
import threading
from scipy import special
from sklearn.preprocessing import normalize
from LDA_Object import get_number_of_topics
from LDA_Object import get_vocabulary
from LDA_Object import get_initial_beta
from LDA_Object import ldaObject
from LDA_Object import get_word_in_vocab_dict


class my_thread (threading.Thread):
    def __init__(self, threadID, name, lda):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.lda = lda

    def run(self):
        print self.name, self.threadID, "started"

    def run_LDA_once(self):
        self.lda.run_LDA(1,1)
        #print self.name, self.threadID, "finished"

    def update_beta(self, beta):
        self.lda.update_beta(beta)

    def get_beta(self):
        return self.lda.beta

start_time = time.time()
threads=[]
corpus_size = 4
iterations = 100
initial_beta = get_initial_beta()
number_of_topics = get_number_of_topics()
vocabulary = get_vocabulary()
word_in_vocab_dict = get_word_in_vocab_dict()

for c in range(corpus_size):
    thread = my_thread(c , "Thread", ldaObject([[]], {}, True))
    thread.start()
    threads.append(thread)

for it in range(iterations):
    beta = np.zeros((number_of_topics, len(vocabulary)))
    for t in threads:
        t.run_LDA_once()
    for t in threads:
        t.join()
    for t in threads:
        beta += t.get_beta()
    beta = normalize(beta, axis=1, norm ="l1")

    for t in threads:
        t.update_beta(beta)

beta_difference = np.sum(abs(np.subtract(beta, initial_beta)))
print beta_difference
end_time = time.time()
# for topic in beta:
#     for word in vocabulary:
#         if topic[word_in_vocab_dict[word]]>0.05:
#             print word, " ", topic[word_in_vocab_dict[word]]
# print "**********************"
# for topic in initial_beta:
#     for word in vocabulary:
#         if topic[word_in_vocab_dict[word]]>0.05:
#             print word, " ", topic[word_in_vocab_dict[word]]

print "Finished in ",end_time-start_time,"seconds"